name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npm run type-check

    - name: Lint (strict)
      run: npm run lint:strict

    - name: Code quality check
      run: |
        echo "Running comprehensive code quality checks..."
        npm run lint:check || echo "‚ö†Ô∏è Lint warnings found"
    
    - name: Run tests
      run: npm run test:run
    
    - name: Test coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Coverage report
      run: |
        echo "üìä Test Coverage Summary:"
        if [ -f coverage/coverage-summary.json ]; then
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            console.log('Lines:', total.lines.pct + '%');
            console.log('Functions:', total.functions.pct + '%');
            console.log('Branches:', total.branches.pct + '%');
            console.log('Statements:', total.statements.pct + '%');
          "
        fi

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('coverage/coverage-summary.json')) {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            const comment = `## üìä Test Coverage Report

            | Metric | Percentage |
            |--------|------------|
            | Lines | ${total.lines.pct}% |
            | Functions | ${total.functions.pct}% |
            | Branches | ${total.branches.pct}% |
            | Statements | ${total.statements.pct}% |

            Generated by CI/CD Pipeline ü§ñ`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Bundle analysis
      run: npm run analyze
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 30

  typescript-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript strict mode verification
      run: |
        echo "üîç Verifying TypeScript strict mode compliance..."
        npm run type-check
        echo "‚úÖ TypeScript strict mode check passed!"

    - name: Agent tests verification
      run: |
        echo "ü§ñ Running agent-specific test suite..."
        npm test -- src/agents/ src/tests/integration/
        echo "‚úÖ Agent tests passed!"

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Security audit
      run: npm run security-audit

    - name: TypeScript security analysis
      run: |
        echo "üîí Running TypeScript security analysis..."
        # Check for any remaining 'any' types in critical files
        if grep -r "any" src/agents/ src/lib/ --include="*.ts" --include="*.tsx" | grep -v test | wc -l | grep -v "^0$"; then
          echo "‚ö†Ô∏è Found 'any' types in production code - consider strengthening types"
        fi
        echo "‚úÖ Security analysis completed"

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build, typescript-check, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
    
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
